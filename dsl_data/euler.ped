def Euler001
    fun multiples_of_3_and_5(n: int) -> int
        (1000) -> 233168
        (10) -> 23
        (100) -> 2318
        (200) -> 9168
        (500) -> 57918

def Euler002
    fun even_fibonacci_numbers(n: int) -> int
        (4000000) -> 4613732
        (10) -> 10
        (100) -> 44
        (1000) -> 798
        (10000) -> 3382

def Euler003
    fun largest_prime_factor(n: int) -> int
        (33843) -> 389
        (58341) -> 19447
        (193149) -> 1951
        (2472813) -> 39251
        (43534217) -> 12157

def Euler004
    fun is_palindrome(s: str) -> bool
    fun largest_palindrome_product(n: int) -> int
        (1000000) -> 906609
        (10202) -> 10201
        (100000) -> 99999
        (300000) -> 299992
        (700000) -> 698896

def Euler005
    fun smallest_multiple(n: int) -> int
        (20) -> 232792560
        (10) -> 2520
        (12) -> 27720
        (15) -> 360360
        (17) -> 1225224

def Euler006
    fun sum_square_difference(n: int) -> int
        (100) -> 25164150
        (10) -> 2640
        (30) -> 206770
        (50) -> 1582700
        (70) -> 6058430

def Euler007
    fun nth_prime(n: int) -> int
        (10001) -> 104743
        (11) -> 31
        (101) -> 547
        (1001) -> 7927
        (5001) -> 48619

def Euler008
    fun largest_product_in_a_series(s: str, k: int) -> int
        ("7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450", 11) -> 940584960
        ("72972571636269561882670428252483600823257530420752963450", 13) -> 313528320
        ("953218746", 3) -> 224
        ("73167176531330624919225119674426574742355349194934", 5) -> 6048
        ("73167176531330624919225119674426574742355349194934", 9) -> 2540160

def Euler009
    fun special_pythagorean_triplet(n: int) -> int
        (1000) -> 31875000
        (156) -> 131820
        (200) -> 255000
        (324) -> 1180980
        (798) -> 9903180

def Euler010
    fun summation_of_primes(n: int) -> int
        (10) -> 17
        (100) -> 1060
        (1000) -> 76127
        (10000) -> 5736396
        (100000) -> 454396537

def Euler011
    fun largest_product_in_a_grid(grid: list<list<int>>) -> int
        ([
            [ 8, 2,22,97,38,15, 0,40, 0,75, 4, 5, 7,78,52,12,50,77,91, 8],
            [49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48, 4,56,62, 0],
            [81,49,31,73,55,79,14,29,93,71,40,67,53,88,30, 3,49,13,36,65],
            [52,70,95,23, 4,60,11,42,69,24,68,56, 1,32,56,71,37, 2,36,91],
            [22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80],
            [24,47,32,60,99, 3,45, 2,44,75,33,53,78,36,84,20,35,17,12,50],
            [32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70],
            [67,26,20,68, 2,62,12,20,95,63,94,39,63, 8,40,91,66,49,94,21],
            [24,55,58, 5,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72],
            [21,36,23, 9,75, 0,76,44,20,45,35,14, 0,61,33,97,34,31,33,95],
            [78,17,53,28,22,75,31,67,15,94, 3,80, 4,62,16,14, 9,53,56,92],
            [16,39, 5,42,96,35,31,47,55,58,88,24, 0,17,54,24,36,29,85,57],
            [86,56, 0,48,35,71,89, 7, 5,44,44,37,44,60,21,58,51,54,17,58],
            [19,80,81,68, 5,94,47,69,28,73,92,13,86,52,17,77, 4,89,55,40],
            [ 4,52, 8,83,97,35,99,16, 7,97,57,32,16,26,26,79,33,27,98,66],
            [88,36,68,87,57,62,20,72, 3,46,33,67,46,55,12,32,63,93,53,69],
            [ 4,42,16,73,38,25,39,11,24,94,72,18, 8,46,29,32,40,62,76,36],
            [20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74, 4,36,16],
            [20,73,35,29,78,31,90, 1,74,31,49,71,48,86,81,16,23,57, 5,54],
            [ 1,70,54,71,83,51,54,69,16,92,33,48,61,43,52, 1,89,19,67,48]
        ]) -> 70600674
        ([
            [14,73,31,32, 7,88],
            [21,36,23, 9,75,54],
            [78,17,53,28,22,75],
            [16,39, 5,42,96,35],
            [86,56, 0,48,35,71],
            [19,80,81,68, 5,94]
        ]) -> 27993600
        ([
            [81,49,31,73,55,79],
            [52,70,95,23, 4,60],
            [22,31,16,71,51,67],
            [24,47,32,60,99, 3],
            [32,98,81,28,64,23],
            [67,26,20,68, 2,62]
        ]) -> 32719995
        ([
            [34,89,63,72,21,36],
            [14, 0,61,33,97,34],
            [62,16,14, 9,53,56],
            [24,36,29,85,57, 5],
            [44,44,37,44,60,21],
            [55,58,88,24, 0,17]
        ]) -> 13725936
        ([
            [35,71,89, 7, 5,44],
            [ 4,89,55,40,19,80],
            [16,26,26,79,33,27],
            [72, 3,46,33,67,46],
            [20,72,30,23,88,34],
            [62,99,69,82,67,59]
        ]) -> 20669165

def Euler012
    fun highly_divisible_triangular_number(n: int) -> int
        (500) -> 76576500
        (10) -> 120
        (50) -> 25200
        (100) -> 73920
        (200) -> 2031120

def Euler013
    fun large_sum(numbers: list<str>) -> str
        ([
            "37107287533902102798797998220837590246510135740250",
            "46376937677490009712648124896970078050417018260538",
            "74324986199524741059474233309513058123726617309629",
            "91942213363574161572522430563301811072406154908250",
            "23067588207539346171171980310421047513778063246676",
            "89261670696623633820136378418383684178734361726757",
            "28112879812849979408065481931592621691275889832738",
            "44274228917432520321923589422876796487670272189318",
            "47451445736001306439091167216856844588711603153276",
            "70386486105843025439939619828917593665686757934951",
            "62176457141856560629502157223196586755079324193331",
            "64906352462741904929101432445813822663347944758178",
            "92575867718337217661963751590579239728245598838407",
            "58203565325359399008402633568948830189458628227828",
            "80181199384826282014278194139940567587151170094390",
            "35398664372827112653829987240784473053190104293586",
            "86515506006295864861532075273371959191420517255829",
            "71693888707715466499115593487603532921714970056938",
            "54370070576826684624621495650076471787294438377604",
            "53282654108756828443191190634694037855217779295145",
            "36123272525000296071075082563815656710885258350721",
            "45876576172410976447339110607218265236877223636045",
            "17423706905851860660448207621209813287860733969412",
            "81142660418086830619328460811191061556940512689692",
            "51934325451728388641918047049293215058642563049483",
            "62467221648435076201727918039944693004732956340691",
            "15732444386908125794514089057706229429197107928209",
            "55037687525678773091862540744969844508330393682126",
            "18336384825330154686196124348767681297534375946515",
            "80386287592878490201521685554828717201219257766954",
            "78182833757993103614740356856449095527097864797581",
            "16726320100436897842553539920931837441497806860984",
            "48403098129077791799088218795327364475675590848030",
            "87086987551392711854517078544161852424320693150332",
            "59959406895756536782107074926966537676326235447210",
            "69793950679652694742597709739166693763042633987085",
            "41052684708299085211399427365734116182760315001271",
            "65378607361501080857009149939512557028198746004375",
            "35829035317434717326932123578154982629742552737307",
            "94953759765105305946966067683156574377167401875275",
            "88902802571733229619176668713819931811048770190271",
            "25267680276078003013678680992525463401061632866526",
            "36270218540497705585629946580636237993140746255962",
            "24074486908231174977792365466257246923322810917141",
            "91430288197103288597806669760892938638285025333403",
            "34413065578016127815921815005561868836468420090470",
            "23053081172816430487623791969842487255036638784583",
            "11487696932154902810424020138335124462181441773470",
            "63783299490636259666498587618221225225512486764533",
            "67720186971698544312419572409913959008952310058822",
            "95548255300263520781532296796249481641953868218774",
            "76085327132285723110424803456124867697064507995236",
            "37774242535411291684276865538926205024910326572967",
            "23701913275725675285653248258265463092207058596522",
            "29798860272258331913126375147341994889534765745501",
            "18495701454879288984856827726077713721403798879715",
            "38298203783031473527721580348144513491373226651381",
            "34829543829199918180278916522431027392251122869539",
            "40957953066405232632538044100059654939159879593635",
            "29746152185502371307642255121183693803580388584903",
            "41698116222072977186158236678424689157993532961922",
            "62467957194401269043877107275048102390895523597457",
            "23189706772547915061505504953922979530901129967519",
            "86188088225875314529584099251203829009407770775672",
            "11306739708304724483816533873502340845647058077308",
            "82959174767140363198008187129011875491310547126581",
            "97623331044818386269515456334926366572897563400500",
            "42846280183517070527831839425882145521227251250327",
            "55121603546981200581762165212827652751691296897789",
            "32238195734329339946437501907836945765883352399886",
            "75506164965184775180738168837861091527357929701337",
            "62177842752192623401942399639168044983993173312731",
            "32924185707147349566916674687634660915035914677504",
            "99518671430235219628894890102423325116913619626622",
            "73267460800591547471830798392868535206946944540724",
            "76841822524674417161514036427982273348055556214818",
            "97142617910342598647204516893989422179826088076852",
            "87783646182799346313767754307809363333018982642090",
            "10848802521674670883215120185883543223812876952786",
            "71329612474782464538636993009049310363619763878039",
            "62184073572399794223406235393808339651327408011116",
            "66627891981488087797941876876144230030984490851411",
            "60661826293682836764744779239180335110989069790714",
            "85786944089552990653640447425576083659976645795096",
            "66024396409905389607120198219976047599490197230297",
            "64913982680032973156037120041377903785566085089252",
            "16730939319872750275468906903707539413042652315011",
            "94809377245048795150954100921645863754710598436791",
            "78639167021187492431995700641917969777599028300699",
            "15368713711936614952811305876380278410754449733078",
            "40789923115535562561142322423255033685442488917353",
            "44889911501440648020369068063960672322193204149535",
            "41503128880339536053299340368006977710650566631954",
            "81234880673210146739058568557934581403627822703280",
            "82616570773948327592232845941706525094512325230608",
            "22918802058777319719839450180888072429661980811197",
            "77158542502016545090413245809786882778948721859617",
            "72107838435069186155435662884062257473692284509516",
            "20849603980134001723930671666823555245252804609722",
            "53503534226472524250874054075591789781264330331690"
        ]) -> "5537376230"
        ([
            "37107287533902102798797998220837590246510135740250",
            "46376937677490009712648124896970078050417018260538",
            "74324986199524741059474233309513058123726617309629",
            "91942213363574161572522430563301811072406154908250",
            "23067588207539346171171980310421047513778063246676"
        ]) -> "2728190129"
        ([
            "89261670696623633820136378418383684178734361726757",
            "28112879812849979408065481931592621691275889832738",
            "44274228917432520321923589422876796487670272189318",
            "47451445736001306439091167216856844588711603153276",
            "70386486105843025439939619828917593665686757934951"
        ]) -> "2794867112"
        ([
            "62176457141856560629502157223196586755079324193331",
            "64906352462741904929101432445813822663347944758178",
            "92575867718337217661963751590579239728245598838407",
            "58203565325359399008402633568948830189458628227828",
            "80181199384826282014278194139940567587151170094390"
        ]) -> "3580434420"
        ([
            "35398664372827112653829987240784473053190104293586",
            "86515506006295864861532075273371959191420517255829",
            "71693888707715466499115593487603532921714970056938",
            "54370070576826684624621495650076471787294438377604",
            "53282654108756828443191190634694037855217779295145"
        ]) -> "3012607837"

def Euler014
    fun longest_collatz_sequence(n: int) -> int
        (1000) -> 871
        (10000) -> 6171
        (20000) -> 17647
        (50000) -> 35655
        (100000) -> 77031
        
def Euler015
    fun lattice_paths(m: int, n: int) -> int
        (3, 3) -> 20
        (5, 7) -> 792
        (16, 12) -> 30421755
        (8, 16) -> 735471
        (16, 16) -> 601080390

def Euler016
    fun power_digit_sum(n: int) -> int
        (1000) -> 1366
        (10) -> 7
        (100) -> 115
        (200) -> 256
        (500) -> 679

def Euler017
    fun number_to_words(n: int) -> str
        (100) -> "one hundred"
        (123) -> "one hundred and twenty three"
        (312) -> "three hundred and twelve"
        (997) -> "nine hundred and ninety seven"
        (1000) -> "one thousand"

def Euler018
    fun maximum_path_sum_i(triangle: list<list<int>>) -> int
        ([
            [75],
            [95,64],
            [17,47,82],
            [18,35,87,10],
            [20, 4,82,47,65],
            [19, 1,23,75, 3,34],
            [88, 2,77,73, 7,63,67],
            [99,65, 4,28, 6,16,70,92],
            [41,41,26,56,83,40,80,70,33],
            [41,48,72,33,47,32,37,16,94,29],
            [53,71,44,65,25,43,91,52,97,51,14],
            [70,11,33,28,77,73,17,78,39,68,17,57],
            [91,71,52,38,17,14,91,43,58,50,27,29,48],
            [63,66, 4,68,89,53,67,30,73,16,69,87,40,31],
            [ 4,62,98,27,23, 9,70,98,73,93,38,53,60, 4,23]
        ]) -> 1074
        ([
            [2],
            [1, 3],
            [6, 4, 5]
        ]) -> 10
        ([
            [3],
            [7, 4],
            [2, 4, 6],
            [8, 5, 9, 3]
        ]) -> 23
        ([
            [5],
            [9, 6],
            [4, 6, 8],
            [0, 7, 1, 5],
            [6, 3, 2, 9, 7]
        ]) -> 33
        ([
            [4],
            [3, 7],
            [5, 9, 3],
            [2, 7, 8, 5],
            [9, 8, 3, 5, 6],
            [7, 2, 6, 9, 8, 5]
        ]) -> 42

def Euler019
    fun counting_sundays(y1: int, y2: int) -> int
        (1901, 2000) -> 171
        (1901, 1910) -> 17
        (2001, 2100) -> 172
        (1901, 1930) -> 51
        (1901, 2900) -> 1719

def Euler020
    fun factorial_digit_sum(n: int) -> int
        (100) -> 648
        (10) -> 27
        (20) -> 54
        (50) -> 216
        (300) -> 2466

def Euler021
    fun d(n: int) -> int
    fun amicable_numbers(n: int) -> int
        (10000) -> 31626
        (220) -> 0
        (221) -> 220
        (285) -> 504
        (50000) -> 115818

def Euler022
    fun names_scores(names: list<str>, queries: list<str>) -> int
        (["ALEX", "LUIS", "JAMES", "BRIAN", "PAMELA"], ["PAMELA"]) -> 240
        (["ALEX", "LUIS", "JAMES", "BRIAN", "PAMELA"], ["BRIAN", "PAMELA"]) -> 328
        (["ALEX", "LUIS", "JAMES", "BRIAN", "PAMELA"], ["ALEX", "LUIS", "JAMES", "BRIAN", "PAMELA"]) -> 758
        (["FRITZ", "ROSENDO", "MILFORD", "CHRISTOPER", "ALFONZO", "LYMAN", "JOSIAH", "BRANT", "WILTON", "RICO"], ["FRITZ"]) -> 316
        (["FRITZ", "ROSENDO", "MILFORD", "CHRISTOPER", "ALFONZO", "LYMAN", "JOSIAH", "BRANT", "WILTON", "RICO"], ["FRITZ", "ROSENDO", "MILFORD"]) -> 1665

def Euler023
    fun is_abundant(n: int) -> bool
    fun non_abundant_sums(n: int) -> int
        (100) -> 2766
        (200) -> 10266
        (500) -> 62766
        (1000) -> 240492
        (5000) -> 2035227

def Euler024
    fun lexicographic_permutations(n: int) -> str
        (1000000) -> "2783915460"
        (100) -> "0123495786"
        (1000) -> "0124658793"
        (10000) -> "0139846572"
        (100000) -> "0358926471"

def Euler025
    fun n_digit_fibonacci_number(n: int) -> int
        (1000) -> 4782
        (10) -> 45
        (100) -> 476
        (200) -> 954
        (500) -> 2390

def Euler026
    fun reciprocal_cycles(n: int) -> int
        (1000) -> 983
        (10) -> 7
        (100) -> 97
        (200) -> 193
        (2000) -> 1979

def Euler027
    fun is_prime(n: int) -> bool
    fun quadratic_primes(n: int) -> int
        (1000) -> -59231
        (41) -> 0
        (42) -> -41
        (100) -> -1455
        (200) -> -4925

def Euler028
    fun number_spiral_diagonals(n: int) -> int
        (1001) -> 669171001
        (7) -> 261
        (57) -> 125161
        (101) -> 692101
        (501) -> 83960501

def Euler029
    fun distinct_powers(n: int) -> int
        (5) -> 15                        
        (10) -> 69
        (20) -> 324
        (50) -> 2184
        (100) -> 9183

def Euler030
    fun digit_nth_powers(n: int) -> int
        (5) -> 443839
        (3) -> 1301
        (4) -> 19316
        (6) -> 548834

def Euler031
    fun coin_sums(n: int) -> int
        (200) -> 73682
        (5) -> 4
        (10) -> 11
        (100) -> 4563
        (1000) -> 321335886

def Euler032
    fun pandigital_products(n: int) -> int
        (9) -> 45228
        (5) -> 52
        (6) -> 162
        (7) -> 0
        (8) -> 13458

def Euler033
    fun digit_canceling_fractions(m: int) -> int
        (100) -> 100
        (64) -> 1
        (65) -> 4
        (95) -> 10
        (96) -> 50

def Euler034
    fun digit_factorials(n: int) -> int
        (100000) -> 40730
        (145) -> 0
        (146) -> 145
        (40585) -> 145
        (40586) -> 40730

def Euler035
    fun is_prime(n: int) -> bool
    fun circular_primes(n: int) -> int
        (1000000) -> 55
        (100) -> 13
        (1000) -> 25
        (10000) -> 33
        (100000) -> 43

def Euler036
    fun is_palindrome(s: str) -> bool
    fun double_base_palindromes(n: int) -> int
        (1000000) -> 872187
        (100) -> 157
        (1000) -> 1772
        (10000) -> 18228
        (100000) -> 286602

def Euler037
    fun is_prime(n: int) -> bool
    fun truncatable_primes(n: int) -> int
        (1000000) -> 748317
        (100) -> 186
        (1000) -> 1986
        (10000) -> 8920
        (739397) -> 8920

def Euler038
    fun pandigital_multiples(n: int) -> int
        (9327) -> 932718654
        (8) -> -1
        (9) -> 918273645
        (9267) -> 926718534
        (9273) -> 927318546

def Euler039
    fun integer_right_triangles(n: int) -> int
        (1000) -> 840
        (12) -> 12
        (80) -> 60
        (200) -> 120
        (500) -> 420

def Euler040
    fun champernowne_constant(b: int) -> int
        (2) -> 384
        (3) -> 68040
        (4) -> 0
        (5) -> 11760
        (6) -> 1536

def Euler041
    fun is_prime(n: int) -> bool
    fun pandigital_prime(n: int) -> int
        (7654321) -> 7652413
        (1423) -> -1
        (2000) -> 1423
        (5000) -> 4231
        (1234658) -> 1234657

def Euler042
    fun coded_triangle_numbers(words: list<str>) -> int
        (["PICTURE", "FIELD", "DEBT", "CITY", "DAMAGE"]) -> 1
        (["TRAFFIC", "ACHIEVE", "INTEND", "DECISION", "SMALL"]) -> 2
        (["TITLE", "WHILST", "FEEL", "INFORM", "DOOR"]) -> 3
        (["THREATEN", "EQUIPMENT", "UP", "MILK", "UPON"]) -> 4
        (["WHETHER", "SOUTHERN", "MEET", "CONFIDENCE", "PROPORTION", "TERMS", "CONSTRUCTION", "SKILL", "FIGURE", "KEEP", "OPTION", "DOUBLE", "CONTRIBUTION", "CROWD", "FAIL", "LAW", "ESSENTIAL", "FUNCTION", "LENGTH", "REALLY"]) -> 7

def Euler043
    fun gen_permutations(s: str) -> list<str>
    fun sub_string_divisibility(n: int) -> int
            (3) -> 22212
            (4) -> 711104
            (5) -> 12444480
            (6) -> 189838560
            (7) -> 1099210170

def Euler044
    fun pentagon_numbers(n: int) -> int
            (3000) -> 5482660
            (100) -> -1
            (1000) -> -1
            (2395) -> -1
            (2396) -> 5482660

def Euler045
    fun triangular_pentagonal_and_hexagonal(n: int) -> int
        (2000000000) -> 1533776805
        (1000) -> 1
        (40755) -> 1
        (40756) -> 40755
        (1533776805) -> 40755

def Euler046
    fun is_prime(n: int) -> bool
    fun goldbachs_other_conjecture(n: int) -> int
        (1) -> 5777
        (5775) -> 5777
        (5777) -> 5993
        (5991) -> 5993
        (5993) -> -1

def Euler047
    fun prime_factors(n: int) -> int
    fun distinct_primes_factors(n: int) -> int
        (1) -> 134043
        (134044) -> 238203
        (238204) -> 253894
        (253895) -> 259368
        (259369) -> 315720

def Euler048
    fun self_powers(n: int) -> str
        (1000) -> "9110846700"
        (10) -> "0405071317"
        (50) -> "9454417125"
        (100) -> "9027641920"
        (500) -> "1688579600"

def Euler049
    fun is_prime(n: int) -> bool
    fun gen_permutations(s: str) -> list<str>
    fun prime_permutations(n: int) -> str
        (10000) -> "296962999629"
        (2000) -> "148748178147"
        (12000) -> "114974171971941"
        (14000) -> "127991729921799"
        (15000) -> "148974718979481"

def Euler050
    fun consecutive_prime_sum(limit: int) -> int
        (1000000) -> 997651
        (100) -> 41
        (1000) -> 953
        (10000) -> 9521
        (100000) -> 92951